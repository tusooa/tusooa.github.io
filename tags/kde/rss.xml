<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>何事西风不待人 • Posts by &#34;kde&#34; tag</title>
        <link>http://tusooa.github.io</link>
        <description>A poet, painter, and programmer.</description>
        <language>en</language>
        <pubDate>Sat, 24 Aug 2019 19:51:09 -0400</pubDate>
        <lastBuildDate>Sat, 24 Aug 2019 19:51:09 -0400</lastBuildDate>
        <category>kde</category>
        <category>krita</category>
        <category>c++</category>
        <category>code</category>
        <category>tech</category>
        <category>帜</category>
        <category>坑</category>
        <category>无奈</category>
        <category>复杂</category>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/08/24/Pay-another-respect-to-kritacommand-which-we-are-going-beyond/</guid>
            <title>Pay another respect to kritacommand--which we are going beyond</title>
            <link>http://tusooa.github.io/2019/08/24/Pay-another-respect-to-kritacommand-which-we-are-going-beyond/</link>
            <category>kde</category>
            <category>krita</category>
            <category>c++</category>
            <category>tech</category>
            <pubDate>Sat, 24 Aug 2019 19:51:09 -0400</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;Your work is gonna make Krita significantly different.
– &lt;a href=&#34;https://invent.kde.org/woltherav&#34;&gt;Wolthera&lt;/a&gt;, Krita developer and digital artist&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Krita’s undo system, namely &lt;code&gt;kritacommand&lt;/code&gt;, was &lt;a href=&#34;https://invent.kde.org/kde/krita/commit/76fc48a7ce15afb93c072d4faa77da831517ee52&#34;&gt;added&lt;/a&gt; 8 years ago to Calligra under the name of &lt;code&gt;kundo2&lt;/code&gt;, as a fork of Qt’s undo framework. The use of undo commands, however, might have an even longer history. Undo commands provide a way to revert individual actions. Up to now, most (&lt;a href=&#34;https://invent.kde.org/kde/krita/merge_requests/32/diffs&#34;&gt;though not all&lt;/a&gt;) undo commands do it by providing two sets of code that do and undo the actions, respectively. Drawbacks of this system includes (1) it is not very easy to manage; (2) it may introduce duplicated code; and (3) it makes it hard to access a previous document state without actually going back to that state. What I do is to start getting rid of such situation.&lt;/p&gt;
&lt;p&gt;The plan for a new system is to use shallow copies to store documents at different states. Dmitry said “it was something we really want to do and allows us to make historical brushes (fetch content from earlier document states).” And according to him, he spent years to implement copy-on-write on paint layers. He suggested me to start from vector layers which he thought would be easier since it does not need to be very thread-safe. &lt;/p&gt;
&lt;p&gt;I completely understood that was a challenge, but did not realize where the difficult part was until I come here. Copy-on-write is not the challenging part. We have &lt;code&gt;QSharedDataPointer&lt;/code&gt; and almost all the work is to routinely replace the same code. Porting tools is more difficult. The old flake tools are running under the GUI thread, which makes no requirement on thread-safety. Technically we do not need to run it in a stroke / in image thread but with no multithreading the tools runs too slowly on some computers (read as “my Thinkpad laptop”) so I am not unwilling to take this extra challenge. In previous posts I described how the strokes work and the problems I encountered. Besides that there are still some problems I need to face.&lt;/p&gt;
&lt;h2 id=&#34;the-HACK-code-in-the-stroke-strategy&#34;&gt;&lt;a href=&#34;#the-HACK-code-in-the-stroke-strategy&#34; class=&#34;headerlink&#34; title=&#34;the HACK code in the stroke strategy&#34;&gt;&lt;/a&gt;the HACK code in the stroke strategy&lt;/h2&gt;&lt;p&gt;At the last of the strokes post, I proposed a fix to the crash when deleting &lt;code&gt;KisNode&lt;/code&gt;, which is messy. After testing with Dmitry at the sprint, we discovered that the real problems lies in &lt;code&gt;KoShapeManager&lt;/code&gt;‘s &lt;code&gt;updateTreeCompressor&lt;/code&gt;. It is used to schedule updates of its R-tree. However, it is run at the beginning of every other operation so Dmitry says it is no longer needed. After the compressor was removed we are safe to delete the node normally so there would be no need for such hack code.&lt;/p&gt;
&lt;h2 id=&#34;Path-tool-crashing-when-editing-calligraphic-shapes&#34;&gt;&lt;a href=&#34;#Path-tool-crashing-when-editing-calligraphic-shapes&#34; class=&#34;headerlink&#34; title=&#34;Path tool crashing when editing calligraphic shapes&#34;&gt;&lt;/a&gt;Path tool crashing when editing calligraphic shapes&lt;/h2&gt;&lt;p&gt;Calligraphic shapes, coming from Karbon, is a shape created by hand-drawing. It has many path points and editing it using path tool usually leads to a crash. Dmitry tested it with ASan and discovered the problem occurs because the path points, which is fetched in the GUI thread to paint the canvas, could be deleted when editing the shape. He suggests to apply a lock to the canvas, not allowing the image and GUI threads to access the shapes concurrently.&lt;/p&gt;
&lt;h2 id=&#34;Keeping-selections-after-undo-redoing&#34;&gt;&lt;a href=&#34;#Keeping-selections-after-undo-redoing&#34; class=&#34;headerlink&#34; title=&#34;Keeping selections after undo/redoing&#34;&gt;&lt;/a&gt;Keeping selections after undo/redoing&lt;/h2&gt;&lt;p&gt;This challenge is a smaller one. The shape selections were not kept, since they are not part of the layer. It was owned by the layer’s shape manager, though, but a cloned layer would take a brand-new shape manager. In addition &lt;code&gt;undo()&lt;/code&gt; and &lt;code&gt;redo()&lt;/code&gt; will now replace the whole layer, so pointers to original shapes are no longer valid. This means merely keeping the selections from the shape manager would not work. The solution is to map the selected shapes to the cloned layer, which would be kept in the undo command. The strategy I use is similar to what we have done for layers: go through the whole heirarchy of the old layer and push everything into a queue; go through the heirarchy of the cloned layer in the same order and each time take the first shape in the queue; if the popped shape is in the selection, we add its counterpart in the cloned layer to our new selection.&lt;/p&gt;
&lt;p&gt;For now the tools should be working and the merge request is prepared for final review. Hopefully it would make its way to &lt;code&gt;master&lt;/code&gt; soon.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/08/21/The-Sprint/</guid>
            <title>The Sprint</title>
            <link>http://tusooa.github.io/2019/08/21/The-Sprint/</link>
            <category>kde</category>
            <category>krita</category>
            <pubDate>Wed, 21 Aug 2019 23:16:54 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Hi -)) haven’t posted for some time, because I was busy travelling and coding for the first half of the month. From Aug 5 to Aug 9, I went to the Krita Sprint in Deventer, Netherlands.&lt;/p&gt;
&lt;p&gt;According to Boud, I was the first person to arrive. My flight took a transit via Hong Kong where some flights were affected due to natural and social factors, but fortunately mine was not one of them. Upon arrival in Amsterdam I got a ticket for the Intercity to Deventer. Railway constructions made me take a transfer via Utrecht Centraal, but that was not a problem at all: the station has escalators going both up to the hall, and down to the platforms (in China you can only go to the hall by stairs or elevator (which is often crowded after you get off)). When I got out of Deventer Station, Boud immediately recognized me (how?!). It was early in the morning, and the street’s quietness was broken by the sound of me dragging my suitcase. Boud led me through Deventer’s crooked streets and alleys to his house. &lt;/p&gt;
&lt;p&gt;For the next two days people gradually arrived. I met my main mentor &lt;a href=&#34;https://invent.kde.org/dkazakov&#34;&gt;Dmitry&lt;/a&gt; (magician!) and his tiger, Sagoskatt, which I (and many others) have mistaken for a giraffe. He was even the voice actor for Sago. He had got quite a lot of insights into the code base (according to Boud, “80%”) and solved a number of bugs in Krita (but he said he introduced a lot of bugs, ha!). Also I met David Revoy (my favourite painter!), the author of &lt;a href=&#34;https://peppercarrot.com&#34;&gt;Pepper and Carrot&lt;/a&gt;. And Tiar, our developer who started to work full-time on Krita this year; she had always been volunteering to support other Krita users and always on the IRC and Reddit. And two of other three GSoC students for the year: &lt;a href=&#34;https://invent.kde.org/albertofl&#34;&gt;Blackbeard&lt;/a&gt; (just as his face) and &lt;a href=&#34;https://invent.kde.org/kuntalmajumder&#34;&gt;Hellozee&lt;/a&gt;. &lt;a href=&#34;https://invent.kde.org/szaman&#34;&gt;Sh_zam&lt;/a&gt; could not come and lost communications due to political issues, which was really unfortunate (eh at least now he can be connected). It is feels so good to be able to see so many people in the community – they are so nice! And it is such an experience to hack in a basement church.&lt;/p&gt;
&lt;p&gt;On Aug 7 we went to the Open Air Museum. It displays a large extent of the history in the Netherlands, how their people lived. After a really delicious lunch we went out and started to do paintings. I was to paint on my Surface using Krita, but unfortunately it went out of battery so I had to gave up and painted on a postcard. The tram in the museum is my favourite one (I am always fond of transit) and they even have a carhouse where stood lots of old vehicles. Except for my head which hit the ceiling of the coach three times, everything that day was wonderful.&lt;/p&gt;
&lt;p&gt;The next day was the main meeting. In the morning we discussed the development plans for Krita. Bugs. Stability. New features. David Revoy came up again with the &lt;a href=&#34;https://bugs.kde.org/show_bug.cgi?id=407851&#34;&gt;docker size problem&lt;/a&gt;, which Boud simply called it “a Qt problem.” He said, “Yes I do know what to do with that, but new users probably don’t and thus we gotta address it and not solely blame Qt.” (Yeah it troubled me a lot as well!) Another thing closely related to me was &lt;a href=&#34;https://invent.kde.org/websites/docs-krita-org/merge_requests/57&#34;&gt;building on Windows&lt;/a&gt;, which was largely neglected by KDE. In the afternoon the focus shifted to marketing. I did not know much about it, but it is a fact that we cannot produce electricity out of love. We spent quite a lot of time on the painting competition for Krita. Where it should be held. How to collect the paintings. How to filter out good pictures. Krita promotes new artists. They promote our software. &lt;/p&gt;
&lt;p&gt;For the next two days people started leaving. I left on the 10th, and then slept for a whole day when I got to Nanjing (so tired…). On Aug 14th I left again for Toronto, and then restarted to write code and debug. I finally got the time to write this post today, as I finally fixed a crash in my project. It is almost finished, and soon another post would be made on it.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/07/26/Strokes-are-Working-Now/</guid>
            <title>Strokes are Working Now</title>
            <link>http://tusooa.github.io/2019/07/26/Strokes-are-Working-Now/</link>
            <category>kde</category>
            <category>krita</category>
            <category>c++</category>
            <category>tech</category>
            <pubDate>Fri, 26 Jul 2019 11:40:29 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Okay, good news today. I have been porting DefaultTool to the new node-replacing system and 
it is working now, finally, at least for the part I have already done.&lt;/p&gt;
&lt;p&gt;The work involves combining a number of different modules in Krita: the stroke system,
KoInteractionTool and its interaction strategies, and, well, the COW mechanism in Flake.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KoInteractionTool&lt;/code&gt; is the class used to manage the interaction with vector shapes, and 
is subclassed by &lt;code&gt;DefaultTool&lt;/code&gt;. The behaviours of &lt;code&gt;KoInteractionTool&lt;/code&gt; (and thus &lt;code&gt;DefaultTool&lt;/code&gt;) 
are defined by &lt;code&gt;KoInteractionStrategy&lt;/code&gt;s. Upon the press of the mouse button, &lt;code&gt;DefaultTool&lt;/code&gt; 
creates an instance of some subclass of &lt;code&gt;KoInteractionStrategy&lt;/code&gt;, say, &lt;code&gt;ShapeMoveStrategy&lt;/code&gt;, 
according to the point of the click as well as keyboard modifiers. Mouse move events after that 
are all handled by the interaction strategy. When the mouse is released, the interaction strategy’s 
&lt;code&gt;finishInteraction()&lt;/code&gt; is called, and then &lt;code&gt;createCommand()&lt;/code&gt;. If the latter returns some 
&lt;code&gt;KUndo2Command&lt;/code&gt;, the command is added to the undo history. Till now it sounds simple.&lt;/p&gt;
&lt;p&gt;So how does the stroke system come in? I have experimented the interaction strategy 
without the stroke system (&lt;a href=&#34;commit&#34;&gt;https://invent.kde.org/tusooaw/krita/commit/638bfcd84c622d3cfefda1e5132380439dd3fdc2&lt;/a&gt;), 
but it is really slow and even freezes Krita for a while sometimes. The stroke system 
allows the modification of the shapes to run in the image thread, instead of the GUI thread. 
A stroke is a set of jobs scheduled and run by a &lt;code&gt;KisStrokesFacade&lt;/code&gt; (here, &lt;code&gt;KisImage&lt;/code&gt;). 
One creates the stroke in a strokes facade using a stroke strategy, which defines the behaviour 
of the stroke. After creation, jobs can be added to the stroke and then executed at some later 
time (it is asynchronous). &lt;/p&gt;
&lt;p&gt;So combining these two, we have an interaction strategy and a stroke strategy – 
when the interaction strategy is created, we start the stroke in the image; 
when there is mouse move, we add individual jobs that change the shapes to the stroke; 
when the mouse released, we end the stroke. 
My discussion with Dmitry firstly tended to make the interaction strategy inherit 
the stroke strategy but later it proves not a viable solution since the interaction 
strategy is owned and deleted by &lt;code&gt;KoInteractionTool&lt;/code&gt; while the stroke strategy is owned 
by the stroke — which will lead to double deletion. So we divide it into two classes 
instead: the interaction strategy starts the stroke, and the stroke strategy takes a copy 
of the current active layer upon creation; when handling mouse move events, a job is added 
to the stroke to modify the current layer; finally when the interaction finishes, 
the interaction strategy ends the stroke and creates an undo command if the layer has been 
changed.&lt;/p&gt;
&lt;p&gt;A problem I found lies in the final stage–if the mouse is released as soon as being pressed 
and no undo command is created, Krita will simply crash. It does not happen when I use &lt;code&gt;gdb&lt;/code&gt; 
to start Krita so it seems to be a timing issue though it leads to difficulty for debugging as 
well. Dmitry used a self-modified version of Qt to produce a backtrace, indicating the problem 
probably lies in &lt;code&gt;KisCanvas2&lt;/code&gt;‘s &lt;code&gt;canvasUpdateCompressor&lt;/code&gt;, which is not thread-safe. However, 
after I changed it to &lt;code&gt;KisThreadSafeSignalCompressor&lt;/code&gt;, the crash still happens, unfortunately. &lt;/p&gt;
&lt;p&gt;The final inspiration comes from the comments in &lt;code&gt;KisThreadSafeSignalCompressor&lt;/code&gt;, though. It 
indicates we cannot delete the compressor from other threads — we have to use &lt;code&gt;obj-&amp;gt;deleteLater()&lt;/code&gt; 
instead, since it lies in the gui thread. And aha, that is the problem. The stroke strategy’s destructor 
is executed in the image thread; if the undo command is not created, there is only one reference to 
our copied &lt;code&gt;KisNode&lt;/code&gt;, namely in our stroke strategy, so it has to be destructed there. However, upon 
the creation of the &lt;code&gt;KisNode&lt;/code&gt;, it is moved into the gui thread. So it simply means we cannot let it 
be deleted in the image thread. The solution looks a little bit messy, but it works:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;KisNode *node = m_d-&amp;gt;originalState.data(); &lt;span class=&#34;comment&#34;&gt;// take the address from KisSharedPtr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;node-&amp;gt;ref(); &lt;span class=&#34;comment&#34;&gt;// prevent KisSharedPtr from deleting the node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;m_d-&amp;gt;originalState.clear(); &lt;span class=&#34;comment&#34;&gt;// now node is not being referenced by any KisSharedPtr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;node-&amp;gt;deref(); &lt;span class=&#34;comment&#34;&gt;// the reference count is now zero again&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;node-&amp;gt;deleteLater(); &lt;span class=&#34;comment&#34;&gt;// it will be deleted by the event loop, later&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/07/09/make-j5-kritaflake/</guid>
            <title>`make -j5 kritaflake`</title>
            <link>http://tusooa.github.io/2019/07/09/make-j5-kritaflake/</link>
            <category>kde</category>
            <category>krita</category>
            <category>c++</category>
            <category>tech</category>
            <pubDate>Tue, 09 Jul 2019 13:37:14 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;At the end of June I finished copy-on-write vector layers. From the very beginning, I have been 
&lt;a href=&#34;https://tusooa.github.io/2019/05/18/Polymorphism-and-Implicit-Sharing/&#34;&gt;researching into&lt;/a&gt; 
possibilities to make &lt;code&gt;kritaflake&lt;/code&gt; implicitly sharable. In that post I mentioned the way 
Sean Parent uses for Photoshop, and adapted it for the derived d-pointers in Flake. &lt;/p&gt;
&lt;h2 id=&#34;Derived-d-pointers&#34;&gt;&lt;a href=&#34;#Derived-d-pointers&#34; class=&#34;headerlink&#34; title=&#34;Derived d-pointers&#34;&gt;&lt;/a&gt;Derived d-pointers&lt;/h2&gt;&lt;p&gt;TL;DR: We got rid of it.&lt;/p&gt;
&lt;p&gt;As I mentioned in the &lt;a href=&#34;https://phabricator.kde.org/T10901&#34;&gt;task page&lt;/a&gt;, derived d-pointers originally 
in Flake are a barrier to implicit sharing. One of the reasons is that we need to write more code (either 
&lt;code&gt;KisSharedDescendent&lt;/code&gt; wrapper class, or repeated code for virtual clone functions). Also, derived 
d-pointers do not actually encapsulate the data in the parent classes – for example, the members in 
&lt;code&gt;KoShapePrivate&lt;/code&gt; are all accessible by descendents of &lt;code&gt;KoShape&lt;/code&gt;, say, &lt;code&gt;KoShapeContainer&lt;/code&gt;. That is probably 
not how encapsulating should work. So in the end we decided to get rid of derived d-pointers in Flake.&lt;/p&gt;
&lt;p&gt;This leads to one problem, however, in the class &lt;code&gt;KoShapeGroup&lt;/code&gt;. &lt;code&gt;KoShapeGroup&lt;/code&gt; is a descendent of &lt;code&gt;KoShapeContainer&lt;/code&gt;, 
which owns a &lt;code&gt;KoShapeContainerModel&lt;/code&gt; that can be subclassed to control the behaviour when a child is added to or 
removed from the container. &lt;code&gt;KoShapeGroup&lt;/code&gt; uses &lt;code&gt;ShapeGroupContainerModel&lt;/code&gt; which performs additional operations 
specific to &lt;code&gt;KoShapeGroup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After I merged my branch into master, it was said that Flake tests failed under address sanitizer (ASan). I 
took a look and discovered that there was use after free in the class &lt;code&gt;KoShapeGroup&lt;/code&gt;, namely the use of its 
d-pointer. The use is called by the destructor of &lt;code&gt;KoShapeContainer&lt;/code&gt;, which calls 
&lt;code&gt;KoShapeContainerModel::deleteOwnedShapes()&lt;/code&gt;, which removes individual shapes 
from the container, which then calls &lt;code&gt;KoShapeGroup::invalidateSizeCache()&lt;/code&gt;. The original situation was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;destructor of &lt;code&gt;KoShapeGroup&lt;/code&gt; was called; &lt;/li&gt;
&lt;li&gt;members defined in &lt;code&gt;KoShapeGroup&lt;/code&gt; got deleted (nothing, because 
everything is in the derived d-pointer which is defined in &lt;code&gt;KoShape&lt;/code&gt;); &lt;/li&gt;
&lt;li&gt;destructor of &lt;code&gt;KoShapeContainer&lt;/code&gt; 
was called, which calls &lt;code&gt;d-&amp;gt;model-&amp;gt;deleteOwnedShapes()&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;then that of &lt;code&gt;KoShape&lt;/code&gt;, which deletes all the private members. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But after the derived d-pointers are converted to normal ones, the calling sequence upon destruction 
becomes: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;destructor of &lt;code&gt;KoShapeGroup&lt;/code&gt; was called; &lt;/li&gt;
&lt;li&gt;members defined in &lt;code&gt;KoShapeGroup&lt;/code&gt; got deleted (its own d-pointer); &lt;/li&gt;
&lt;li&gt;destructor of &lt;code&gt;KoShapeContainer&lt;/code&gt; was called, which calls &lt;code&gt;d-&amp;gt;model-&amp;gt;deleteOwnedShapes()&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;d-&amp;gt;model&lt;/code&gt; is a &lt;code&gt;ShapeGroupContainerModel&lt;/code&gt;, which will call &lt;code&gt;KoShapeGroup::invalidateSizeCache()&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;that last function accesses the d-pointer of &lt;code&gt;KoShapeGroup&lt;/code&gt;, USE AFTER FREE. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to solve this problem we have to manually call &lt;code&gt;model()-&amp;gt;deleteOwnedShapes()&lt;/code&gt; in the destructor 
of &lt;code&gt;KoShapeGroup&lt;/code&gt;, at which time the d-pointer is still accessible.&lt;/p&gt;
&lt;h2 id=&#34;q-pointers&#34;&gt;&lt;a href=&#34;#q-pointers&#34; class=&#34;headerlink&#34; title=&#34;q-pointers&#34;&gt;&lt;/a&gt;q-pointers&lt;/h2&gt;&lt;p&gt;TL;DR: We also got rid of it. &lt;/p&gt;
&lt;p&gt;q-pointers are a method used in Qt to hide private methods from the header files, in order to improve 
binary compatibility. q-pointers are stored in *Private classes (&lt;code&gt;d&lt;/code&gt;s), indicating the object that owns 
this private instance. But this is, of course, conflicting with the principle of “sharing” because 
the situation now is that multiple objects can own the same data. The q-pointers in flake is rather confusing 
under such circumstances, since the private data cannot know which object is the caller. &lt;/p&gt;
&lt;p&gt;To avoid this confusion, there are multiple ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;to move all the functions regarding q-pointers to the public classes; &lt;/li&gt;
&lt;li&gt;to pass the q-pointer every time when calling those functions in private classes; or &lt;/li&gt;
&lt;li&gt;to add another layer of “shared data” in the d-pointer and keep the q-pointers in the unshared part. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;implicit-sharing&#34;&gt;&lt;a href=&#34;#implicit-sharing&#34; class=&#34;headerlink&#34; title=&#34;implicit sharing&#34;&gt;&lt;/a&gt;implicit sharing&lt;/h2&gt;&lt;p&gt;To enable implicit sharing for the &lt;code&gt;KoShape&lt;/code&gt; hierarchy, the only thing left to be done is to 
change the &lt;code&gt;QScopedPointer&amp;lt;Private&amp;gt; d;&lt;/code&gt; in the header file to &lt;code&gt;QSharedDataPointer&amp;lt;Private&amp;gt; d;&lt;/code&gt; 
and make the private classes inherit &lt;code&gt;QSharedData&lt;/code&gt;. This step is rather easy and then just run the 
tests to make sure it does not break anything. Horray! &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/06/21/Snapshot-Docker/</guid>
            <title>Snapshot Docker</title>
            <link>http://tusooa.github.io/2019/06/21/Snapshot-Docker/</link>
            <category>kde</category>
            <category>krita</category>
            <pubDate>Fri, 21 Jun 2019 11:40:38 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the past few weeks I have been working on the &lt;a href=&#34;https://phabricator.kde.org/T10991&#34;&gt;Snapshot Docker&lt;/a&gt;, 
and now it is finished already. -))&lt;/p&gt;
&lt;p&gt;The idea of snapshots is to make copies of the current document and allow users to return to them at a later 
time. This is a part of my whole Google Summer of Code project, which aims to bring Krita a better undo/redo 
system. When fully implemented, it will fully replace the current mechanism that stores actions with one that 
stores different states. That is to say, Krita will create a snapshot of the document for every undoable step.&lt;/p&gt;
&lt;p&gt;Snapshot Docker is not only a feature requested by artists but also a experimental implementation of the 
clone-replace mechanism. It has the following key parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Cloning the document, which is provided by &lt;code&gt;KisDocument::lockAndCloneForSaving()&lt;/code&gt;, which is already implemented 
in master.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replace the current document by another one, which is previously cloned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Part (1) is already implemented so the work falls mainly on Part (2). My original approach is to replace the 
document and image pointers in &lt;code&gt;KisView&lt;/code&gt; and &lt;code&gt;KisCanvas&lt;/code&gt;, but it is not viable since other parts of the program 
have signal/slot connections on the &lt;code&gt;KisDocument&lt;/code&gt; and &lt;code&gt;KisImage&lt;/code&gt;, and directly replacing the two pointers will 
not only fail to work but also cause weird crashes. After discussing with &lt;a href=&#34;https://invent.kde.org/dkazakov&#34;&gt;Dmitry&lt;/a&gt;, 
we find out that it is probably better not to touch these two pointers, but to replace the content within
&lt;code&gt;KisDocument&lt;/code&gt; and &lt;code&gt;KisImage&lt;/code&gt;. It is therefore suggested that two member functions be made, namely 
&lt;code&gt;KisDocument::copyFromDocument&lt;/code&gt; and &lt;code&gt;KisImage::copyFromImage&lt;/code&gt;. These functions copies data from another document/image 
to the current one, avoiding the changes to the pointers inside the original instance. Eh, except for the nodes, 
since we have to reset and refresh the nodes in the image. &lt;/p&gt;
&lt;p&gt;It is also important to notify other parts of Krita about the change in the document. One important thing is 
tell the layer docker about the changes in the nodes (they are completely different), which is done using the 
&lt;code&gt;KisImage::sigLayersChangedAsync()&lt;/code&gt; signal. The current activated node is also stored and restored, by using 
the strategy of linearizing the layer tree using a queue, and then finding the corresponding node in the cloned 
image. Note that when restoring, we are unable to find layer by uuid, since they should change when copied to 
the current image (the comments in &lt;code&gt;KisImage&lt;/code&gt; says the only situation where we should keep the uuids is for saving).&lt;/p&gt;
&lt;p&gt;Another interesting thing is the palettes. Krita 4.2.0 allows documents to store their own, local palettes. 
The palette list is but a &lt;code&gt;QList&amp;lt;KoColorSet *&amp;gt;&lt;/code&gt;, meaning that only creating a new &lt;code&gt;QList&lt;/code&gt; of the same pointers 
will not work. This is because, the palettes are controlled by canvas resource manager, which takes the responsibility 
to delete them. Therefore, when taking snapshots, we had better take deep copies of the &lt;code&gt;KoColorSet&lt;/code&gt;s. And then 
another problem comes: the snapshots own their &lt;code&gt;KoColorSet&lt;/code&gt;s because they are not controlled by the resource manager 
in any way; but the &lt;code&gt;KisDocument&lt;/code&gt; in the view does not. So we have to set up another flag, &lt;code&gt;ownsPaletteList&lt;/code&gt;, to 
tell the document whether it should delete the palettes in the destructor.&lt;/p&gt;
&lt;p&gt;And now the work has shifted to the refactoring of &lt;code&gt;kritaflake&lt;/code&gt;, the library that mainly handles vector layers and 
shapes. I converted the whole &lt;code&gt;KoShape&lt;/code&gt; hierarchy to implicit sharing where possible, but some tests are broken. I 
am now on Windows, where unit tests do not run. I will continue the development of flake as soon as I get access to 
my Linux laptop.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/06/16/New-Style-Signal-Slot-Connection/</guid>
            <title>New Style Signal/Slot Connection</title>
            <link>http://tusooa.github.io/2019/06/16/New-Style-Signal-Slot-Connection/</link>
            <category>kde</category>
            <category>krita</category>
            <category>c++</category>
            <category>tech</category>
            <pubDate>Sun, 16 Jun 2019 20:12:56 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Yes, I know. The last post on the assistants is rather boring. And yet these days I have been 
working on the &lt;a href=&#34;https://invent.kde.org/kde/krita/merge_requests/41&#34;&gt;snapshot docker&lt;/a&gt;, though 
it still seems a little (just a little, you see) unfinished as Dmitry is said to experience 
a relatively high delay when switching between snapshots. However this is not what I can reproduce 
on my older laptop, so I am really waiting for his test results in order to further investigate 
the problem.&lt;/p&gt;
&lt;p&gt;But there &lt;em&gt;is&lt;/em&gt; something interesting happening just when I am randomly testing things. From
Krita’s debug output, I saw &lt;code&gt;QObject::connect()&lt;/code&gt; complaining about the arguments I passed, 
saying it is expecting parenthesis. “Okay,” I thought, “then there have to be something wrong 
with the &lt;a href=&#34;https://invent.kde.org/kde/krita/merge_requests/41/diffs?commit_id=8c465f12139318e86ab36d343e1db8bbbb141e06&#34;&gt;code I wrote&lt;/a&gt;.” 
And that was quite confusing. I remember having used member function pointers in those places, 
got a compile-time error since &lt;code&gt;KisSignalAutoConnectionsStore&lt;/code&gt; did not support the new syntax,
then switched back to the &lt;code&gt;SINGAL()&lt;/code&gt; and &lt;code&gt;SLOT()&lt;/code&gt; macros. &lt;code&gt;KisSignalAutoConnectionsStore&lt;/code&gt; is 
a helper class to quickly (dis)connect a group of connections. One can use the &lt;code&gt;addConnection()&lt;/code&gt; 
method to add a connection, and use &lt;code&gt;clear()&lt;/code&gt; to remove all connections made before. &lt;/p&gt;
&lt;p&gt;Well, everything good, apart from the fact that I missed the parenthesis, which I did not 
discover until I looked into the debug output. So I asked Dmitry why not add the new syntax 
to &lt;code&gt;KisSignalAutoConnectionsStore&lt;/code&gt;, and he said we should. &lt;/p&gt;
&lt;p&gt;What is good about the new syntax is compile-time checking. We probably do not want our connections
to fail to be made only when you run the program, just because there is a typo in the signature. 
That is definitely tiring and hard to catch (hmm, I did not notice the problem until today I 
randomly glanced at the command line; it might be worse if I shipped the snapshot docker together 
with those careless bugs).&lt;/p&gt;
&lt;p&gt;The modification to the code seems straightforward. All what happens is in the &lt;code&gt;KisSignalAutoConnection&lt;/code&gt; 
class. In its constructor, the connection is made using &lt;code&gt;QObject::connect()&lt;/code&gt;; in its destructor, 
the connection is removed by passing the same sets of arguments to &lt;code&gt;QObject::disconnect()&lt;/code&gt; currently 
in &lt;code&gt;master&lt;/code&gt;. The signature is just &lt;code&gt;KisSignalAutoConnection(const QObject *, const char *, const QObject *, const char *)&lt;/code&gt;, 
as &lt;code&gt;SIGNAL()&lt;/code&gt; and &lt;code&gt;SLOT()&lt;/code&gt; macros are but to append their arguments to the string &lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt; respectively. &lt;/p&gt;
&lt;p&gt;So the problem we have is we do not want the arguments that specify the signals and/or slots 
to be just strings. We want them to be pointers to member functions, or maybe lambdas. 
According to QObject document, the signature for new-style &lt;code&gt;connect()&lt;/code&gt; is:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;QMetaObject::Connection &lt;span class=&#34;title&#34;&gt;QObject::connect&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; QObject *sender, PointerToMemberFunction signal, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; QObject *context, Functor functor, Qt::ConnectionType type = Qt::AutoConnection)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Okay, so we know that &lt;code&gt;sender&lt;/code&gt; and &lt;code&gt;receiver&lt;/code&gt; should be pointers to &lt;code&gt;QObject&lt;/code&gt;s, and 
either the type of &lt;code&gt;signal&lt;/code&gt; or &lt;code&gt;functor&lt;/code&gt; we do not know. 
Now let’s make our &lt;code&gt;KisSignalAutoConnection&lt;/code&gt; constructor a template function: &lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Signal&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;title&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;KisSignalAutoConnection&lt;/span&gt;(&lt;span class=&#34;title&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;QObject&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;sender&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Signal&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;signal&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;                               &lt;span class=&#34;title&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;QObject&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;receiver&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;                               &lt;span class=&#34;title&#34;&gt;Qt&lt;/span&gt;:&lt;/span&gt;:ConnectionType type = Qt::AutoConnection);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;But when these parameters are passed to &lt;code&gt;QObject::connect()&lt;/code&gt;, we get a compile-time error, saying 
there is no matching overload for &lt;code&gt;connect()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;The answer is the Qt documentation is simplifying, if not hiding, the truth. The real definition 
for &lt;code&gt;connect()&lt;/code&gt; is found in Line 227 of &lt;code&gt;qobject.h&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; Func1, &lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; Func2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; QMetaObject::Connection &lt;span class=&#34;title&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; QtPrivate::FunctionPointer&amp;lt;Func1&amp;gt;::Object *sender, Func1 signal,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;                                 &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; QtPrivate::FunctionPointer&amp;lt;Func2&amp;gt;::Object *receiver, Func2 slot,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;                                 Qt::ConnectionType type = Qt::AutoConnection)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And tracking down the definition of &lt;code&gt;QtPrivate::FunctionPointer&lt;/code&gt;, we get it in &lt;code&gt;qobjectdefs_impl.h&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Obj&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Ret&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;typename&lt;/span&gt;... &lt;span class=&#34;title&#34;&gt;Args&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FunctionPointer&lt;/span&gt;&amp;lt;Ret (Obj::*) (Args...)&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; Obj Object;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And seeing what we have passed to &lt;code&gt;KisSignalAutoConnection&lt;/code&gt; (in the &lt;a href=&#34;https://invent.kde.org/kde/krita/merge_requests/41/diffs?commit_id=39262a9385fb933ab428f4a72939a692994e0f21#dbe442eaf45dc765d904fe6d9922b309d19f1d5a&#34;&gt;test code&lt;/a&gt;):&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;KisSignalAutoConnectionsStore conn;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;conn.addConnection(test1.data(), &amp;amp;TestClass::sigTest1, test2.data(), &amp;amp;TestClass::slotTest1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We can see that &lt;code&gt;Func1&lt;/code&gt; is a member function of &lt;code&gt;TestClass&lt;/code&gt;, so &lt;code&gt;QtPrivate::FunctionPointer&amp;lt;Func1&amp;gt;::Object&lt;/code&gt; 
is just &lt;code&gt;TestClass&lt;/code&gt;. But the constructor of &lt;code&gt;KisSignalAutoConnection&lt;/code&gt; receives a &lt;code&gt;const QObject *&lt;/code&gt;. 
The problem here is that &lt;code&gt;connect()&lt;/code&gt; is expecting a &lt;code&gt;const TestClass *&lt;/code&gt;, but we give them a &lt;code&gt;const QObject *&lt;/code&gt;. 
A base class pointer cannot be implicitly converted to a derived class pointer, so we have that error. &lt;/p&gt;
&lt;p&gt;The resolution seems pretty simple, as we only need to include the types of &lt;code&gt;sender&lt;/code&gt; and &lt;code&gt;receiver&lt;/code&gt; 
into the template, and pass everything as-is to &lt;code&gt;QObject::connect()&lt;/code&gt;: &lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Sender&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Signal&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Receiver&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;title&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;KisSignalAutoConnection&lt;/span&gt;(&lt;span class=&#34;title&#34;&gt;Sender&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sender&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Signal&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;signal&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Receiver&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;receiver&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;method&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;                               &lt;span class=&#34;title&#34;&gt;Qt&lt;/span&gt;:&lt;/span&gt;:ConnectionType type = Qt::AutoConnection);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Sounds viable. But how can we store the four parameters? It might be intuitive to make another base class, 
say, &lt;code&gt;KisSignalAutoConnectionBase()&lt;/code&gt;, and make &lt;code&gt;KisSignalAutoConnection&lt;/code&gt; a template class, so we can 
store &lt;code&gt;sender&lt;/code&gt;, &lt;code&gt;receiver&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;But wait, isn’t this just too complex? First of all, we do not have any overridden functions 
except for the destructor. What is more, we do not seem to have any valuable things in that base 
class – it would be an empty class. The use of inheritance here is ugly and useless. &lt;/p&gt;
&lt;p&gt;And, we do not need to store the four parameters at all. &lt;code&gt;QObject::connect()&lt;/code&gt; returns a 
&lt;code&gt;QMetaObject::Connection&lt;/code&gt;, which can be used later to &lt;code&gt;disconnect()&lt;/code&gt; it. So instead of 
the parameters passed to &lt;code&gt;connect()&lt;/code&gt;, we just store the &lt;code&gt;Connection&lt;/code&gt; object. And that is not 
part of the template:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Sender&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Signal&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Receiver&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;    &lt;span class=&#34;title&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;KisSignalAutoConnection&lt;/span&gt;(&lt;span class=&#34;title&#34;&gt;Sender&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sender&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Signal&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;signal&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Receiver&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;receiver&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;method&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;                                   &lt;span class=&#34;title&#34;&gt;Qt&lt;/span&gt;:&lt;/span&gt;:ConnectionType type = Qt::AutoConnection)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        : m_connection(QObject::connect(sender, signal, receiver, method, type))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; ~KisSignalAutoConnection()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        QObject::disconnect(m_connection);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    QMetaObject::Connection m_connection;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And with the &lt;a href=&#34;https://invent.kde.org/kde/krita/merge_requests/41/diffs?commit_id=39262a9385fb933ab428f4a72939a692994e0f21#dbe442eaf45dc765d904fe6d9922b309d19f1d5a&#34;&gt;test code&lt;/a&gt; mentioned above, 
we do make sure that the new implementation works well with both syntaxes. &lt;/p&gt;
&lt;p&gt;So, great, krita developers, we can use the new syntax for auto connections as well. &lt;/p&gt;
&lt;p&gt;PS: There will soon be another post on my work of the snapshot docker – it’s almost finished!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/05/30/Assistants-copy-share-assignment/</guid>
            <title>Assistants -- copy, share, assignment</title>
            <link>http://tusooa.github.io/2019/05/30/Assistants-copy-share-assignment/</link>
            <category>kde</category>
            <category>krita</category>
            <category>c++</category>
            <category>code</category>
            <pubDate>Thu, 30 May 2019 14:20:53 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Over the last week I have been investigating into &lt;a href=&#34;https://bugs.kde.org/show_bug.cgi?id=361012&#34;&gt;Bug 361012&lt;/a&gt;, 
on the undo history of the modification of guides. But from the very beginning I mixed up the two terms 
“guides” and “assistants,” so I decided to &lt;a href=&#34;https://invent.kde.org/kde/krita/merge_requests/32&#34;&gt;work on both&lt;/a&gt;. 
The work with guides is a lot simpler and will not be covered here, though. &lt;/p&gt;
&lt;p&gt;As I write this post, the &lt;a href=&#34;https://invent.kde.org/kde/krita/tree/master&#34;&gt;master branch of Krita&lt;/a&gt; 
does not create any undo commands for the document. I first &lt;a href=&#34;https://invent.kde.org/kde/krita/merge_requests/32/diffs?commit_id=12bc1d0730f04321c5ec304ce09f6670ef14c576&#34;&gt;added undo commands&lt;/a&gt; for adding and removing 
assistants, which seems the easiest. The editing of them is a bit more difficult, as the dragging 
operations involve the movement of many “handles,” the movable round buttons that define the position 
of one or more assistants. The source code on master for implementing such actions is quite complicated 
and involves a great number of cases. It would be another great endeavour to put all these bunches of 
code into a &lt;code&gt;KUndo2Command&lt;/code&gt;. But, another thing I have experimented with and I will be working on 
will immediately clear the clouds.&lt;/p&gt;
&lt;p&gt;So I just thought of the copy-on-write mechanism, and yes, why not? Though COW itself is not 
actually implemented for the guides, it does seem inspiring. I mean, we can just save a copy 
of all assistants and, when needed, restore that. &lt;/p&gt;
&lt;p&gt;The main problem here is the handles. They are represented as shared pointers in individual 
assistants and may be shared between different ones (e.g. two perspectives share two corner 
handles and one side handles). When we take a clone of the list of assistants it will be 
necessary to keep this kind of relationship. My solution is to use a &lt;code&gt;QMap&lt;/code&gt; of pointers, 
which seems to coincide with the logic of exporting to xml, but I had yet to read that part
of the code when writing mine so I did not know about that. The logic is to check, for 
every handle, whether there is a mapping relationship in the map. If there is, we reuse that 
handle, and if not, we create a new one with the same position and record that relationship 
in our &lt;code&gt;QMap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But some display properties are not to be recorded into the undo history. Such properties 
include the changing of color, visibility, etc. To resolve this problem, I put these data into 
a shared pointer and, when we are cloning an assistant for undo/redo, we will reuse that pointer.
When we replace the assistant list with the one recorded, all the display properties will remain 
since the data are shared. &lt;/p&gt;
&lt;p&gt;And for the next several weeks I will move onto the &lt;a href=&#34;https://phabricator.kde.org/T10991&#34;&gt;Snapshot Docker&lt;/a&gt;.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/05/18/Polymorphism-and-Implicit-Sharing/</guid>
            <title>Polymorphism and Implicit Sharing</title>
            <link>http://tusooa.github.io/2019/05/18/Polymorphism-and-Implicit-Sharing/</link>
            <category>kde</category>
            <category>krita</category>
            <category>c++</category>
            <category>tech</category>
            <pubDate>Sat, 18 May 2019 14:18:41 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;Recently I have been researching into possibilities to make members of &lt;code&gt;KoShape&lt;/code&gt; copy-on-write. 
At first glance, it seems enough to declare d-pointers as some subclass of &lt;code&gt;QSharedDataPointer&lt;/code&gt; 
(see Qt’s &lt;a href=&#34;https://doc.qt.io/qt-5/implicit-sharing.html&#34;&gt;implicit sharing&lt;/a&gt;) and then replace 
pointers with instances. However, there remain a number of problems to be solved, one of them 
being polymorphism.&lt;/p&gt;
&lt;h2 id=&#34;polymorphism-and-value-semantics&#34;&gt;&lt;a href=&#34;#polymorphism-and-value-semantics&#34; class=&#34;headerlink&#34; title=&#34;polymorphism and value semantics&#34;&gt;&lt;/a&gt;polymorphism and value semantics&lt;/h2&gt;&lt;p&gt;In the &lt;a href=&#34;https://invent.kde.org/kde/krita/blob/aeb8a1097ad58eaff91aa34c40b18e82428b0a3a/libs/flake/KoShape_p.h#L65&#34;&gt;definition&lt;/a&gt; 
of &lt;code&gt;KoShapePrivate&lt;/code&gt; class, the member &lt;code&gt;fill&lt;/code&gt; is stored as a &lt;code&gt;QSharedPointer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;QSharedPointer&amp;lt;KoShapeBackground&amp;gt; fill;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a number of subclasses of &lt;code&gt;KoShapeBackground&lt;/code&gt;, including &lt;code&gt;KoColorBackground&lt;/code&gt;, 
&lt;code&gt;KoGradientBackground&lt;/code&gt;, to name just a few. We cannot store an instance of &lt;code&gt;KoShapeBackground&lt;/code&gt; 
directly since we want polymorphism. But, well, making &lt;code&gt;KoShapeBackground&lt;/code&gt; copy-on-write seems to have 
nothing to do with whether we store it as a pointer or instance. So let’s just put it here – 
I will come back to this question at the end of this post.&lt;/p&gt;
&lt;h2 id=&#34;d-pointers-and-QSharedData&#34;&gt;&lt;a href=&#34;#d-pointers-and-QSharedData&#34; class=&#34;headerlink&#34; title=&#34;d-pointers and QSharedData&#34;&gt;&lt;/a&gt;d-pointers and &lt;code&gt;QSharedData&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;KoShapeBackground&lt;/code&gt; heirarchy (similar to the &lt;code&gt;KoShape&lt;/code&gt; one) uses derived d-pointers
for storing private data. To make things easier, I will here use a small example to 
elaborate on its use. &lt;/p&gt;
&lt;h3 id=&#34;derived-d-pointer&#34;&gt;&lt;a href=&#34;#derived-d-pointer&#34; class=&#34;headerlink&#34; title=&#34;derived d-pointer&#34;&gt;&lt;/a&gt;derived d-pointer&lt;/h3&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractPrivate&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AbstractPrivate() : var(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ~AbstractPrivate() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; var;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// it is not yet copy-constructable; we will come back to this later&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Abstract(const Abstract &amp;amp;other) = default;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~Abstract() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AbstractPrivate &amp;amp;dd)&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;d_ptr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&amp;amp;dd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyVar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    QScopedPointer&amp;lt;AbstractPrivate&amp;gt; d_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Q_DECLARE_PRIVATE(Abstract)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DerivedPrivate&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; AbstractPrivate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DerivedPrivate() : AbstractPrivate(), bar(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ~DerivedPrivate() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Derived&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Abstract&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Derived() : Abstract(*(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DerivedPrivate)) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// it is not yet copy-constructable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Derived(const Derived &amp;amp;other) = default;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~Derived() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AbstractPrivate &amp;amp;dd)&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123; Q_D(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Derived); &lt;span class=&#34;built_in&#34;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; d-&amp;gt;var &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; d-&amp;gt;bar &amp;lt;&amp;lt; &lt;span class=&#34;built_in&#34;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyVar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123; Q_D(Derived); d-&amp;gt;var++; d-&amp;gt;bar++; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Q_DECLARE_PRIVATE(Derived)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The main goal of making &lt;code&gt;DerivedPrivate&lt;/code&gt; a subclass of &lt;code&gt;AbstractPrivate&lt;/code&gt; is to avoid multiple 
d-pointers in the structure. Note that there are constructors taking a reference to the 
private data object. These are to make it possible for a &lt;code&gt;Derived&lt;/code&gt; object to use the same
d-pointer as its &lt;code&gt;Abstract&lt;/code&gt; parent. The &lt;code&gt;Q_D()&lt;/code&gt; macro is used to convert the &lt;code&gt;d_ptr&lt;/code&gt;, which is a 
pointer to &lt;code&gt;AbstractPrivate&lt;/code&gt; to another pointer, named &lt;code&gt;d&lt;/code&gt;, of some of its descendent type; 
here, it is a &lt;code&gt;DerivedPrivate&lt;/code&gt;. It is used together with the &lt;code&gt;Q_DECLARE_PRIVATE()&lt;/code&gt; macro 
in the class definition 
and has a rather complicated implementation in the Qt headers. But for simplicity, it does 
not hurt for now to understand it as the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define Q_D(Class) Class##Private *const d = reinterpret_cast&amp;lt;Class##Private *&amp;gt;(d_ptr.data())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;Class##Private&lt;/code&gt; means simply to append string &lt;code&gt;Private&lt;/code&gt; to (the macro argument) &lt;code&gt;Class&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now let’s test it by creating a pointer to &lt;code&gt;Abstract&lt;/code&gt; and give it a &lt;code&gt;Derived&lt;/code&gt; object:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;QScopedPointer&amp;lt;Abstract&amp;gt; &lt;span class=&#34;title&#34;&gt;ins&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Derived())&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;modifyVar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo 0 0
foo 1 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looks pretty viable – everything’s working well! – What if we use Qt’s implicit sharing? Just 
make &lt;code&gt;AbstractPrivate&lt;/code&gt; a subclass of &lt;code&gt;QSharedData&lt;/code&gt; and replace &lt;code&gt;QScopedPointer&lt;/code&gt; with &lt;code&gt;QSharedDataPointer&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;making-d-pointer-QSharedDataPointer&#34;&gt;&lt;a href=&#34;#making-d-pointer-QSharedDataPointer&#34; class=&#34;headerlink&#34; title=&#34;making d-pointer QSharedDataPointer&#34;&gt;&lt;/a&gt;making d-pointer &lt;code&gt;QSharedDataPointer&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;In the last section, we commented out the copy constructors since &lt;code&gt;QScopedPointer&lt;/code&gt; is not copy-constructable,
but here &lt;code&gt;QSharedDataPointer&lt;/code&gt; is copy-constructable, so we add them back:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractPrivate&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; QSharedData&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AbstractPrivate() : var(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ~AbstractPrivate() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; var;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Abstract(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Abstract &amp;amp;other) = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~Abstract() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AbstractPrivate &amp;amp;dd)&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;d_ptr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&amp;amp;dd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyVar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    QSharedDataPointer&amp;lt;AbstractPrivate&amp;gt; d_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Q_DECLARE_PRIVATE(Abstract)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DerivedPrivate&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; AbstractPrivate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DerivedPrivate() : AbstractPrivate(), bar(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ~DerivedPrivate() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Derived&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Abstract&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Derived() : Abstract(*(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DerivedPrivate)) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Derived(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Derived &amp;amp;other) = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~Derived() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AbstractPrivate &amp;amp;dd)&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123; Q_D(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Derived); &lt;span class=&#34;built_in&#34;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; d-&amp;gt;var &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; d-&amp;gt;bar &amp;lt;&amp;lt; &lt;span class=&#34;built_in&#34;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyVar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123; Q_D(Derived); d-&amp;gt;var++; d-&amp;gt;bar++; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Q_DECLARE_PRIVATE(Derived)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And testing the copy-on-write mechanism:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;QScopedPointer&amp;lt;Derived&amp;gt; &lt;span class=&#34;title&#34;&gt;ins&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Derived())&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;QScopedPointer&amp;lt;Derived&amp;gt; &lt;span class=&#34;title&#34;&gt;ins2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Derived(*ins))&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;modifyVar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins2-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;But, eh, it’s a compile-time error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error: reinterpret_cast from type &amp;apos;const AbstractPrivate*&amp;apos; to type &amp;apos;AbstractPrivate*&amp;apos; casts away qualifiers
 Q_DECLARE_PRIVATE(Abstract)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;Q-D-revisited&#34;&gt;&lt;a href=&#34;#Q-D-revisited&#34; class=&#34;headerlink&#34; title=&#34;Q_D, revisited&#34;&gt;&lt;/a&gt;&lt;code&gt;Q_D&lt;/code&gt;, revisited&lt;/h3&gt;&lt;p&gt;So, where does the &lt;code&gt;const&lt;/code&gt; removal come from? In &lt;code&gt;qglobal.h&lt;/code&gt;, the code related to &lt;code&gt;Q_D&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; T *&lt;span class=&#34;title&#34;&gt;qGetPtrHelper&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T *ptr)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ptr; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;typename Ptr&amp;gt; inline auto qGetPtrHelper(const Ptr &amp;amp;ptr) -&amp;gt; decltype(ptr.operator-&amp;gt;()) &amp;#123; return ptr.operator-&amp;gt;(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// The body must be a statement:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;define&lt;/span&gt; Q_CAST_IGNORE_ALIGN(body) QT_WARNING_PUSH QT_WARNING_DISABLE_GCC(&lt;span class=&#34;meta-string&#34;&gt;&amp;quot;-Wcast-align&amp;quot;&lt;/span&gt;) body QT_WARNING_POP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;define&lt;/span&gt; Q_DECLARE_PRIVATE(Class) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inline Class##Private* d_func() \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; Q_CAST_IGNORE_ALIGN(&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;Class##Private *&amp;gt;(qGetPtrHelper(d_ptr));) &amp;#125; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inline const Class##Private* d_func() const \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; Q_CAST_IGNORE_ALIGN(&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Class##Private *&amp;gt;(qGetPtrHelper(d_ptr));) &amp;#125; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;friend&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Class&lt;/span&gt;##&lt;span class=&#34;title&#34;&gt;Private&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;define&lt;/span&gt; Q_D(Class) Class##Private * const d = d_func()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It turns out that &lt;code&gt;Q_D&lt;/code&gt; will call &lt;code&gt;d_func()&lt;/code&gt; which then calls an overload of &lt;code&gt;qGetPtrHelper()&lt;/code&gt; 
that takes &lt;code&gt;const Ptr &amp;amp;ptr&lt;/code&gt;. What does &lt;code&gt;ptr.operator-&amp;gt;()&lt;/code&gt; return? What is the difference between 
&lt;code&gt;QScopedPointer&lt;/code&gt; and &lt;code&gt;QSharedDataPointer&lt;/code&gt; here?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://doc.qt.io/qt-5/qscopedpointer.html#operator--gt&#34;&gt;&lt;code&gt;QScopedPointer&lt;/code&gt;&lt;/a&gt;‘s &lt;code&gt;operator-&amp;gt;()&lt;/code&gt; is a 
&lt;code&gt;const&lt;/code&gt; method that returns a non-&lt;code&gt;const&lt;/code&gt; pointer to &lt;code&gt;T&lt;/code&gt;; however, 
&lt;a href=&#34;https://doc.qt.io/qt-5/qshareddatapointer.html#operator--gt&#34;&gt;&lt;code&gt;QSharedDataPointer&lt;/code&gt;&lt;/a&gt; has two 
&lt;code&gt;operator-&amp;gt;()&lt;/code&gt;s, one being &lt;code&gt;const T* operator-&amp;gt;() const&lt;/code&gt;, the other &lt;code&gt;T* operator-&amp;gt;()&lt;/code&gt;, and they
have quite different behaviours – the non-&lt;code&gt;const&lt;/code&gt; variant calls &lt;code&gt;detach()&lt;/code&gt; (where copy-on-write 
is implemented), but the other one does not.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qGetPtrHelper()&lt;/code&gt; here can only take &lt;code&gt;d_ptr&lt;/code&gt; as a &lt;code&gt;const QSharedDataPointer&lt;/code&gt;, not a non-&lt;code&gt;const&lt;/code&gt; 
one; so, no matter which &lt;code&gt;d_func()&lt;/code&gt; we are calling, we can only get a &lt;code&gt;const AbstractPrivate *&lt;/code&gt;. 
That is just the problem here. &lt;/p&gt;
&lt;p&gt;To resolve this problem, let’s replace the &lt;code&gt;Q_D&lt;/code&gt; macros with the ones we define ourselves:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define CONST_SHARED_D(Class) const Class##Private *const d = reinterpret_cast&amp;lt;const Class##Private *&amp;gt;(d_ptr.constData())
#define SHARED_D(Class) Class##Private *const d = reinterpret_cast&amp;lt;Class##Private *&amp;gt;(d_ptr.data())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will then use &lt;code&gt;SHARED_D(Class)&lt;/code&gt; in place of &lt;code&gt;Q_D(Class)&lt;/code&gt; and &lt;code&gt;CONST_SHARED_D(Class)&lt;/code&gt; for 
&lt;code&gt;Q_D(const Class)&lt;/code&gt;. Since the &lt;code&gt;const&lt;/code&gt; and non-&lt;code&gt;const&lt;/code&gt; variant really behaves differently, 
it should help to differentiate these two uses. Also, delete &lt;code&gt;Q_DECLARE_PRIVATE&lt;/code&gt; since we 
do not need them any more:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractPrivate&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; QSharedData&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AbstractPrivate() : var(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ~AbstractPrivate() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; var;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Abstract(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Abstract &amp;amp;other) = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~Abstract() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AbstractPrivate &amp;amp;dd)&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;d_ptr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&amp;amp;dd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyVar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    QSharedDataPointer&amp;lt;AbstractPrivate&amp;gt; d_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DerivedPrivate&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; AbstractPrivate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DerivedPrivate() : AbstractPrivate(), bar(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ~DerivedPrivate() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; bar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Derived&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Abstract&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Derived() : Abstract(*(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; DerivedPrivate)) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Derived(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Derived &amp;amp;other) = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~Derived() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AbstractPrivate &amp;amp;dd)&lt;/span&gt; : &lt;span class=&#34;title&#34;&gt;Abstract&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123; CONST_SHARED_D(Derived); &lt;span class=&#34;built_in&#34;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; d-&amp;gt;var &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; d-&amp;gt;bar &amp;lt;&amp;lt; &lt;span class=&#34;built_in&#34;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyVar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123; SHARED_D(Derived); d-&amp;gt;var++; d-&amp;gt;bar++; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;With the same &lt;code&gt;main()&lt;/code&gt; code, what’s the result?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo 0 0
foo 1 16606417
foo 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… big whoops, what is that random thing there? Well, if we use &lt;code&gt;dynamic_cast&lt;/code&gt; in place of 
&lt;code&gt;reinterpret_cast&lt;/code&gt;, the program simply crashes after &lt;code&gt;ins-&amp;gt;modifyVar();&lt;/code&gt;, indicating that 
&lt;code&gt;ins&lt;/code&gt;‘s &lt;code&gt;d_ptr.data()&lt;/code&gt; is not at all a &lt;code&gt;DerivedPrivate&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;virtual-clones&#34;&gt;&lt;a href=&#34;#virtual-clones&#34; class=&#34;headerlink&#34; title=&#34;virtual clones&#34;&gt;&lt;/a&gt;virtual clones&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;detach()&lt;/code&gt; method of &lt;code&gt;QSharedDataPointer&lt;/code&gt; will by default create an instance of &lt;code&gt;AbstractPrivate&lt;/code&gt; 
regardless of what the instance really is. Fortunately, it is possible to change that behaviour 
through &lt;a href=&#34;https://doc.qt.io/qt-5/qshareddatapointer.html#clone&#34;&gt;specifying the &lt;code&gt;clone()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to make a virtual function in &lt;code&gt;AbstractPrivate&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;virtual AbstractPrivate *clone() const = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(make it pure virtual just to force all subclasses to re-implement it; if your base class is 
not abstract you probably want to implement the &lt;code&gt;clone()&lt;/code&gt; method) and then override it 
in &lt;code&gt;DerivedPrivate&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;virtual DerivedPrivate *clone() const &amp;#123; return new DerivedPrivate(*this); &amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, specify the template method for &lt;code&gt;QSharedDataPointer::clone()&lt;/code&gt;. As we will re-use it multiple
times (for different base classes), it is better to define a macro:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;define&lt;/span&gt; DATA_CLONE_VIRTUAL(Class) template&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;&amp;gt;                      \&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class##Private *QSharedDataPointer&amp;lt;Class##Private&amp;gt;::clone()   \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;                                                             \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; d-&amp;gt;clone();                                        \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// after the definition of Abstract&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DATA_CLONE_VIRTUAL(Abstract)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It is not necessary to write &lt;code&gt;DATA_CLONE_VIRTUAL(Derived)&lt;/code&gt; as we are never storing a 
&lt;code&gt;QSharedDataPointer&amp;lt;DerivedPrivate&amp;gt;&lt;/code&gt; throughout the heirarchy.&lt;/p&gt;
&lt;p&gt;Then test the code again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo 0 0
foo 1 1
foo 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;– Just as expected! It continues to work if we replace &lt;code&gt;Derived&lt;/code&gt; with &lt;code&gt;Abstract&lt;/code&gt; in &lt;code&gt;QScopedPointer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;QScopedPointer&amp;lt;Abstract&amp;gt; ins(new Derived());
QScopedPointer&amp;lt;Abstract&amp;gt; ins2(new Derived(* dynamic_cast&amp;lt;const Derived *&amp;gt;(ins.data())));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, another problem comes, that the constructor for &lt;code&gt;ins2&lt;/code&gt; seems too ugly, and messy. We could, like 
the private classes, implement a virtual function &lt;code&gt;clone()&lt;/code&gt; for these kinds of things, but it is 
still not gentle enough, and we cannot use a default copy constructor for any class that contains 
such &lt;code&gt;QScopedPointer&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;What about &lt;code&gt;QSharedPointer&lt;/code&gt; that is copy-constructable? Well, then these copies actually point to 
the same data structures and no copy-on-write is performed at all. This still not wanted. &lt;/p&gt;
&lt;h2 id=&#34;the-Descendents-of-…&#34;&gt;&lt;a href=&#34;#the-Descendents-of-…&#34; class=&#34;headerlink&#34; title=&#34;the Descendents of …&#34;&gt;&lt;/a&gt;the &lt;code&gt;Descendent&lt;/code&gt;s of …&lt;/h2&gt;&lt;p&gt;Inspired by &lt;a href=&#34;https://www.youtube.com/watch?v=QGcVXgEVMJg&#34;&gt;Sean Parent’s video&lt;/a&gt;, 
I finally come up with the following implementation:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Descendent&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;concept&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ~&lt;span class=&#34;keyword&#34;&gt;concept&lt;/span&gt;() = &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; T *&lt;span class=&#34;title&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; T *&lt;span class=&#34;title&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;unique_ptr&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;concept&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; U&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;model&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;concept&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model(U x) : instance(move(x)) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; T *&lt;span class=&#34;title&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;instance; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;T *&lt;span class=&#34;title&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;instance; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// or unique_ptr&amp;lt;model&amp;lt;U&amp;gt; &amp;gt;(new model&amp;lt;U&amp;gt;(U(instance))) if you do not have C++14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;unique_ptr&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;concept&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; make_unique&amp;lt;model&amp;lt;U&amp;gt; &amp;gt;(U(instance)); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        U instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;unique_ptr&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;concept&lt;/span&gt;&amp;gt; m_d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; U&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Descendent(U x) : m_d(make_unique&amp;lt;model&amp;lt;U&amp;gt; &amp;gt;(move(x))) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Descendent(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Descendent &amp;amp; that) : m_d(move(that.m_d-&amp;gt;clone())) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Descendent(Descendent &amp;amp;&amp;amp; that) : m_d(move(that.m_d)) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Descendent &amp;amp; &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt;=(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Descendent &amp;amp;that) &amp;#123; Descendent t(that); *&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt; = move(t); &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Descendent &amp;amp; &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt;=(Descendent &amp;amp;&amp;amp; that) &amp;#123; m_d = move(that.m_d); &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; T *&lt;span class=&#34;title&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_d-&amp;gt;ptr(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; T *&lt;span class=&#34;title&#34;&gt;constData&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_d-&amp;gt;ptr(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;T *&lt;span class=&#34;title&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_d-&amp;gt;ptr(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; T *&lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_d-&amp;gt;ptr(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    T *&lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt;-&amp;gt;() &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_d-&amp;gt;ptr(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This class allows you to use &lt;code&gt;Descendent&amp;lt;T&amp;gt;&lt;/code&gt; (read as “descendent of &lt;code&gt;T&lt;/code&gt;“) to represent any instance 
of any subclass of &lt;code&gt;T&lt;/code&gt;. It is copy-constructable, move-constructable, copy-assignable, and move-assignable. &lt;/p&gt;
&lt;p&gt;Test code:&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Descendent&amp;lt;Abstract&amp;gt; ins = Derived();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Descendent&amp;lt;Abstract&amp;gt; ins2 = ins;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;modifyVar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ins2-&amp;gt;foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It gives just the same results as before, but much neater and nicer – How does it work?&lt;/p&gt;
&lt;p&gt;First we define a class &lt;code&gt;concept&lt;/code&gt;. We put here what we want our instance to satisfy. We would like to 
access it as &lt;code&gt;const&lt;/code&gt; and non-&lt;code&gt;const&lt;/code&gt;, and to clone it as-is. Then we define a template class &lt;code&gt;model&amp;lt;U&amp;gt;&lt;/code&gt; 
where &lt;code&gt;U&lt;/code&gt; is a subclass of &lt;code&gt;T&lt;/code&gt;, and implement these functionalities.&lt;/p&gt;
&lt;p&gt;Next, we store a &lt;code&gt;unique_ptr&amp;lt;concept&amp;gt;&lt;/code&gt;. The reason for not using &lt;code&gt;QScopedPointer&lt;/code&gt; is &lt;code&gt;QScopedPointer&lt;/code&gt; is not 
movable, but movability is a feature we actually will want (in sink arguments and return values).&lt;/p&gt;
&lt;p&gt;Finally it’s just the constructor, moving and copying operations, and ways to access the wrapped object.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;Descendent&amp;lt;Abstract&amp;gt; ins2 = ins;&lt;/code&gt; is called, we will go through the copy constructor of &lt;code&gt;Descendent&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Descendent(const Descendent &amp;amp; that) : m_d(move(that.m_d-&amp;gt;clone())) &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will then call &lt;code&gt;ins.m_d-&amp;gt;clone()&lt;/code&gt;. But remember that &lt;code&gt;ins.m_d&lt;/code&gt; actually contains a pointer to 
&lt;code&gt;model&amp;lt;Derived&amp;gt;&lt;/code&gt;, whose &lt;code&gt;clone()&lt;/code&gt; is &lt;code&gt;return make_unique&amp;lt;model&amp;lt;Derived&amp;gt; &amp;gt;(Derived(instance));&lt;/code&gt;. This expression 
will call the copy constructor of &lt;code&gt;Derived&lt;/code&gt;, then make a &lt;code&gt;unique_ptr&amp;lt;model&amp;lt;Derived&amp;gt; &amp;gt;&lt;/code&gt;, which calls the 
constructor of &lt;code&gt;model&amp;lt;Derived&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;model(Derived x) : instance(move(x)) &amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which move-constructs &lt;code&gt;instance&lt;/code&gt;. Finally the &lt;code&gt;unique_ptr&amp;lt;model&amp;lt;Derived&amp;gt; &amp;gt;&lt;/code&gt; is implicitly converted to 
&lt;code&gt;unique_ptr&amp;lt;concept&amp;gt;&lt;/code&gt;, as per the &lt;a href=&#34;https://en.cppreference.com/w/cpp/memory/unique_ptr&#34;&gt;conversion rule&lt;/a&gt;. 
“If &lt;code&gt;T&lt;/code&gt; is a derived class of some base &lt;code&gt;B&lt;/code&gt;, then &lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt; is implicitly convertible to 
&lt;code&gt;std::unique_ptr&amp;lt;B&amp;gt;&lt;/code&gt;.”&lt;/p&gt;
&lt;p&gt;And from now on, happy hacking — (.&amp;gt;w&amp;lt;.)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://tusooa.github.io/2019/05/13/GSoC-2019/</guid>
            <title>GSoC 2019</title>
            <link>http://tusooa.github.io/2019/05/13/GSoC-2019/</link>
            <category>kde</category>
            <category>krita</category>
            <pubDate>Mon, 13 May 2019 11:16:48 -0400</pubDate>
            <description><![CDATA[ &lt;p&gt;This summer will be a little bit interesting as I joined the
&lt;a href=&#34;https://summerofcode.withgoogle.com/&#34;&gt;Google Summer of Code&lt;/a&gt; (GSoC).
The software I will be working on is &lt;a href=&#34;https://krita.org/&#34;&gt;Krita&lt;/a&gt;.
Krita is a painting software I have been using for more than one year.
Since the (pre)release of Krita 4.0, I use it to &lt;a href=&#34;https://www.deviantart.com/thistusooa&#34;&gt;paint all my works&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before using Krita, I used to use PaintToolSAI, and there are quite a lot of concepts
and functionalities in it that I find really useful; after getting involved in the
Krita community I am pretty lucky to be able to introduce these little shiny stars
to our community, and even &lt;a href=&#34;https://github.com/tusooa/krita-docker-color-slider&#34;&gt;implement some of them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://phabricator.kde.org/T10901&#34;&gt;My project for GSoC&lt;/a&gt; is on
&lt;a href=&#34;https://invent.kde.org/kde/krita/tree/master/libs/command&#34;&gt;the undo/redo system in Krita&lt;/a&gt;. 
The system currently works using an undo stack to storage individual changes to the document,
and invoking these commands to perform undos and redos. This system is complex and not easy
to maintain. As &lt;a href=&#34;https://invent.kde.org/dkazakov&#34;&gt;Dmitry&lt;/a&gt; suggests, a better solution would
be &lt;a href=&#34;https://www.youtube.com/watch?v=QGcVXgEVMJg&#34;&gt;storing the states of the document as shallow copies&lt;/a&gt;, 
since it simplifies the system and make history brushes possible. It would be a rather huge
and fundamental change in the code, and he recommends me to experiment with vector layers first.&lt;/p&gt;
&lt;p&gt;Another part of the project, which is not a research, is the snapshot docker that would allow
users to temporarily save some states of the document and return to them quickly at a later time.
This is an enhancement on the GUI level, as the tile data in paint layers are shallow copied, making
it possible to make a clone of the document relatively fast. &lt;/p&gt;
&lt;p&gt;I will make more posts on KDE and Krita in the near future. Let’s keep in touch! (.w.)&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
